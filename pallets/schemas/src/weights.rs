//! Autogenerated weights for `pallet_schemas`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-27, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `MACs-MacBook-Air.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/serv-node
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_schemas
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// pallets/schema-registry/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{constants::RocksDbWeight,Weight}};
use sp_std::marker::PhantomData;

pub trait WeightInfo {
	fn create_schema() -> Weight;
    fn update_schema() -> Weight;
	fn delete_schema() -> Weight;
}

/// Weight functions for `pallet_schemas`.
pub struct SchemaRegistryWeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SchemaRegistryWeightInfo<T> {
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: SchemaRegistry SchemaStore (r:1 w:1)
	/// The range of component `s` is `[0, 100]`.
	fn create_schema() -> Weight {
		// Minimum execution time: 17_000 nanoseconds.
		Weight::from_parts(18_019_846, 0u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: SchemaRegistry SchemaStore (r:1 w:1)
	/// The range of component `s` is `[0, 100]`.
	fn update_schema() -> Weight {
		// Minimum execution time: 18_000 nanoseconds.
		Weight::from_parts(19_789_873, 0u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: SchemaRegistry SchemaStore (r:1 w:1)
	/// The range of component `s` is `[0, 100]`.
	fn delete_schema() -> Weight {
		// Minimum execution time: 14_000 nanoseconds.
		Weight::from_parts(14_959_443, 0u64)
			// Standard Error: 440
			.saturating_add(Weight::from_parts(172, 0u64).saturating_mul(1 as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}

impl WeightInfo for () {
    // Storage: SchemaRegistry SchemaStore (r:1 w:1)
    fn create_schema() -> Weight {
        Weight::from_parts(18_019_846, 0u64)
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }

	// Storage: SchemaRegistry SchemaStore (r:1 w:1)
    fn update_schema() -> Weight {
		Weight::from_parts(19_789_873, 0u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}

	// Storage: SchemaRegistry SchemaStore (r:1 w:1)
	fn delete_schema() -> Weight {
        Weight::from_parts(14_959_443, 0u64)
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
}